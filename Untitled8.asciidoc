+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 1**
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2),..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

**Example 1:**
Input: nums = [1,4,3,2]
Output: 4

**Explanation:** All possible pairings (ignoring the ordering of elements) are:

1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4

----


+*In[ ]:*+
[source, ipython3]
----
(*)Sort the input array nums in ascending order.
(*)Initialize a variable sum_min to 0 to store the sum of the minimum values in the pairs.
(*)Iterate over the sorted array nums with a step size of 2 (i.e., increment the index by 2 in each iteration).
(*)In each iteration, add the smaller value between nums[i] and nums[i+1] to sum_min.
(*)After the iteration is complete, sum_min will contain the maximum sum of the minimum values in the pairs.
(*)Return sum_min as the result.
----


+*In[1]:*+
[source, ipython3]
----
def arrayPairSum(nums):
    nums.sort()
    sum_min = 0
    for i in range(0, len(nums), 2):
        sum_min += min(nums[i], nums[i+1])
    return sum_min
nums = [1, 4, 3, 2]
result = arrayPairSum(nums)
print(result) 
----


+*Out[1]:*+
----
4
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 2
Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor. 

The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. 

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.

Example 1:
Input: candyType = [1,1,2,2,3,3]
Output: 3

Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.
----


+*In[ ]:*+
[source, ipython3]
----
(*)Calculate the maximum number of unique candy types Alice can eat, which is n / 2 since n is always even.
(*)Convert the candyType list into a set to remove duplicates and get only the unique candy types.
(*)Calculate the length of the unique candy types set and assign it to a variable num_unique.
(*)Return the minimum value between num_unique and n / 2, as Alice cannot eat more unique candy types than the maximum 
allowed (n / 2).
----


+*In[2]:*+
[source, ipython3]
----
def maxCandies(candyType):
    max_allowed = len(candyType) // 2
    unique_candy_types = set(candyType)
    num_unique = len(unique_candy_types)
    return min(num_unique, max_allowed)
candyType = [1, 1, 2, 2, 3, 3]
result = maxCandies(candyType)
print(result)
----


+*Out[2]:*+
----
3
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 3
We define a harmonious array as an array where the difference between its maximum value
and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence
among all its possible subsequences.

A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5

Explanation: The longest harmonious subsequence is [3,2,2,2,3].
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize a dictionary counter to keep track of the frequency of each number in nums.
(*)Iterate through each number num in nums and update the frequency count in counter.
(*)Initialize a variable max_length to 0 to store the length of the longest harmonious subsequence.
(*)Iterate through each number num in nums again.
(*)Check if num + 1 is present in counter.
(*)If it is present, calculate the length of the harmonious subsequence starting with num as 
current_length = counter[num] + counter[num + 1].
(*)Update max_length with the maximum value between max_length and current_length.
(*)Return max_length as the length of the longest harmonious subsequence.
----


+*In[3]:*+
[source, ipython3]
----
def findLHS(nums):
    counter = {}
    for num in nums:
        counter[num] = counter.get(num, 0) + 1

    max_length = 0
    for num in nums:
        if num + 1 in counter:
            current_length = counter[num] + counter[num + 1]
            max_length = max(max_length, current_length)

    return max_length
nums = [1, 3, 2, 2, 5, 2, 3, 7]
result = findLHS(nums)
print(result)
----


+*Out[3]:*+
----
5
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 4
You have a long flowerbed in which some of the plots are planted, and some are not.
However, flowers cannot be planted in adjacent plots.
Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: true
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize a variable count to 0 to keep track of the number of new flowers that can be planted.
(*)Iterate through the flowerbed list from left to right.
(*)If the current plot is 0 and its adjacent plots (if they exist) are also 0, it means a new flower can be planted in this 
plot.
(*)Increment count and set the current plot to 1 to mark it as planted.
(*)After the iteration, if count is greater than or equal to n, it means n new flowers can be planted without violating the 
rule. 
(*)Return True.
(*)If the iteration is complete and count is still less than n, it means there are not enough empty adjacent plots to plant n 
flowers. Return False.
----


+*In[4]:*+
[source, ipython3]
----
def canPlaceFlowers(flowerbed, n):
    count = 0
    length = len(flowerbed)
    for i in range(length):
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == length - 1 or flowerbed[i + 1] == 0):
            flowerbed[i] = 1
            count += 1

    return count >= n
flowerbed = [1, 0, 0, 0, 1]
n = 1
result = canPlaceFlowers(flowerbed, n)
print(result)
----


+*Out[4]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 5
Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

Example 1:
Input: nums = [1,2,3]
Output: 6
----


+*In[ ]:*+
[source, ipython3]
----
(*)Sort the nums array in ascending order.
(*)Calculate two possible products:
product1 by multiplying the last three elements in the sorted array (which will give the maximum product if all numbers are
positive).
product2 by multiplying the first two elements (the smallest two elements) with the last element (the largest element) in 
the sorted array (which will give the maximum product if there are negative numbers present).
(*)Return the maximum value between product1 and product2.
----


+*In[5]:*+
[source, ipython3]
----
def maximumProduct(nums):
    nums.sort()
    n = len(nums)
    product1 = nums[n - 1] * nums[n - 2] * nums[n - 3]
    product2 = nums[0] * nums[1] * nums[n - 1]
    return max(product1, product2)
nums = [1, 2, 3]
result = maximumProduct(nums)
print(result)
----


+*Out[5]:*+
----
6
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 6
Given an array of integers nums which is sorted in ascending order, and an integer target,
write a function to search target in nums. If target exists, then return its index. Otherwise,
return -1.

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4

Explanation: 9 exists in nums and its index is 4
----


+*In[ ]:*+
[source, ipython3]
----
(*)initialize two pointers, left and right, pointing to the start and end of the array, respectively.
(*)While left is less than or equal to right, perform the following steps:
Calculate the middle index as mid = (left + right) // 2.
If nums[mid] is equal to the target, return mid as the index of the target.
If nums[mid] is greater than the target, update right = mid - 1 to search the left half of the array.
If nums[mid] is less than the target, update left = mid + 1 to search the right half of the array.
(*)If the target is not found after the loop, return -1 to indicate that the target does not exist in the array.
----


+*In[6]:*+
[source, ipython3]
----
def search(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            right = mid - 1
        else:
            left = mid + 1

    return -1
nums = [-1, 0, 3, 5, 9, 12]
target = 9
result = search(nums, target)
print(result)
----


+*Out[6]:*+
----
4
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 7
An array is monotonic if it is either monotone increasing or monotone decreasing.

An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is
monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

Example 1:
Input: nums = [1,2,2,3]
Output: true
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize two boolean variables isIncreasing and isDecreasing as True.
(*)Iterate through the array starting from index 1:
If nums[i] is greater than nums[i-1], set isDecreasing to False.
If nums[i] is less than nums[i-1], set isIncreasing to False.
(*)If either isIncreasing or isDecreasing is True, return True as the array is monotonic.
(*)Otherwise, return False as the array is neither monotone increasing nor monotone decreasing.
----


+*In[7]:*+
[source, ipython3]
----
def isMonotonic(nums):
    isIncreasing = True
    isDecreasing = True

    for i in range(1, len(nums)):
        if nums[i] > nums[i - 1]:
            isDecreasing = False
        elif nums[i] < nums[i - 1]:
            isIncreasing = False

    return isIncreasing or isDecreasing
nums = [1, 2, 2, 3]
result = isMonotonic(nums)
print(result)
----


+*Out[7]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
Question 8
You are given an integer array nums and an integer k.

In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

Example 1:
Input: nums = [1], k = 0
Output: 0

Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize min_num and max_num as the minimum and maximum values in nums, respectively.
(*)If the difference between min_num and max_num is less than or equal to 2 * k, return 0 as the minimum score can be achieved 
by making all elements equal to the average of min_num and max_num.
(*)Otherwise, calculate mid as the average of min_num and max_num.
(*)Iterate through the array and apply the operation on each element:
If nums[i] is less than mid - k, set it to mid - k.
If nums[i] is greater than mid + k, set it to mid + k.
(*)Recalculate min_num and max_num after the operation.
(*)Return the difference between max_num and min_num as the minimum score of nums.
----


+*In[8]:*+
[source, ipython3]
----
def minDifference(nums, k):
    min_num = min(nums)
    max_num = max(nums)

    if max_num - min_num <= 2 * k:
        return 0

    mid = (min_num + max_num) // 2

    for i in range(len(nums)):
        if nums[i] < mid - k:
            nums[i] = mid - k
        elif nums[i] > mid + k:
            nums[i] = mid + k

    min_num = min(nums)
    max_num = max(nums)

    return max_num - min_num
nums = [1]
k = 0
result = minDifference(nums, k)
print(result)
----


+*Out[8]:*+
----
0
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
